AWSTemplateFormatVersion: "2010-09-09"
Description: Creates AWS EC2 Cluster

Parameters:
  projectName:
    Description: Enter AWS VPC name
    Type: String
    Default: test

  envName:
    Description: Environment tag
    Type: String
    Default: dev

  vpcId:
    Description: VPC ID from vpc template outputs
    Type: AWS::EC2::VPC::Id

  subnetIds:
    Description: List of private subnet IDs
    Type: List<AWS::EC2::Subnet::Id>

  instanceType:
    Description: EC2 instance type
    Type: String
    Default: "t3.medium"

  desiredCapacity:
    Description: Number of EC2 instances to launch in ECS cluster.
    Type: Number
    Default: "2"

  maxSize:
    Description: Maximum number of EC2 instances that can be launched in ECS cluster.
    Type: Number
    Default: "5"

  containerPort:
    Description: What port does the app run on
    Type: Number
    Default: 8000

  ECSAMI:
    Description: The Amazon Machine Image ID used for the cluster
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id

Resources:
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS instances
      GroupName: !Sub "${projectName}-${envName}-ecs-sg"
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref containerPort
          ToPort: !Ref containerPort
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: !Sub "${projectName}-sg"
        - Key: Env
          Value: !Ref envName 

  # SshKeyPair:
  #   Type: AWS::EC2::KeyPair
  #   Properties:
  #     KeyName: !Sub "${projectName}-keypair"
  #     KeyType: rsa

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${projectName}-ecs-cluster"
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      Tags: 
          - Key: Name
            Value: !Sub "${projectName}-ecs-cluster"
          - Key: Env
            Value: !Ref envName 

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      # This is to ensure that the ASG gets deleted first before these
      # resources, when it comes to stack teardown.
      - ECSCluster
      - EC2Role
    Properties:
      VPCZoneIdentifier: !Ref subnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref ContainerInstances
        Version: !GetAtt ContainerInstances.LatestVersionNumber
      MinSize: 0
      MaxSize: !Ref maxSize
      DesiredCapacity: !Ref desiredCapacity
      NewInstancesProtectedFromScaleIn: false
      Tags: 
          - Key: Name
            Value: !Sub "${projectName}-asg"
            PropagateAtLaunch: true # This is required in tags for ASG
          - Key: Env
            Value: !Ref envName
            PropagateAtLaunch: true # This is required in tags for ASG
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: "true"

  # The config for each instance that is added to the cluster
  ContainerInstances:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "asg-launch-template"
      LaunchTemplateData:
        ImageId: !Ref ECSAMI
        InstanceType: !Ref instanceType
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        SecurityGroupIds:
          - !Ref EcsSecurityGroup
        # This injected configuration file is how the EC2 instance
      # knows which ECS cluster on your AWS account it should be joining
        UserData:
          Fn::Base64: !Sub |
           #!/bin/bash -xe
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ContainerInstances --configsets full_install --region ${AWS::Region} &
         # Disable IMDSv1, and require IMDSv2
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
  # Create an ECS capacity provider to attach the ASG to the ECS cluster
  # so that it autoscales as we launch more containers
  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    DependsOn: ECSAutoScalingGroup
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          InstanceWarmupPeriod: 60
          MinimumScalingStepSize: 1
          MaximumScalingStepSize: 100
          Status: ENABLED
          # Percentage of cluster reservation to try to maintain
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED
      Tags: 
          - Key: Name
            Value: !Sub "${projectName}-capacity-provider"
          - Key: Env
            Value: !Ref envName 
      
   # Create a cluster capacity provider assocation so that the cluster
  # will use the capacity provider
  CapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders:
        - !Ref CapacityProvider
      Cluster: !Ref ECSCluster
      DefaultCapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref CapacityProvider
          Weight: 1

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
      - !Ref EC2Role

  # This allows the ECS agent on the EC2 hosts
  # to communciate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      # See reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-iam-awsmanpol.html#security-iam-awsmanpol-AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      # This managed policy allows us to connect to the instance using SSM
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # This is a role which is used within Fargate to allow the Fargate agent
  # to download images, and upload logs.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:*
              StringEquals:
                aws:SourceAccount: !Sub ${AWS::AccountId}
      Path: /
      # This role enables all features of ECS. See reference:
    # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-iam-awsmanpol.html#security-iam-awsmanpol-AmazonECSTaskExecutionRolePolicy
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy 

Outputs:
  # KeyPairPrivateKey:
  #   Description: "Private key to SSH into EC2 instances"
  #   Value: !GetAtt SshKeyPair.KeyPairId
  #   Export:
  #     Name: !Sub "${projectName}-KeyPairPrivateKey"

  ClusterName:
    Description: The ECS cluster into which to launch resources
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${projectName}-EcsClusterName"

  ECSTaskExecutionRole:
    Description: The role used to start up a task
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub "${projectName}-ECSTaskExecutionName"

  CapacityProvider:
    Description: The cluster capacity provider that the service should use to request capacity when it wants to start up a task
    Value: !Ref CapacityProvider
    Export:
      Name: !Sub "${projectName}-CapacityProvider"
