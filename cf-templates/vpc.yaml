AWSTemplateFormatVersion: "2010-09-09"
Description: Creates required AWS services for Hello World App

Parameters:
  projectName:
    Description: Enter AWS VPC name
    Type: String
    Default: test

  envName:
    Description: Environment tag
    Type: String
    Default: dev

  vpcCidrBlock:
    Description: CIDR block for VPC
    Type: String
    Default: 10.72.0.0/16

  numberOfSubnets:
    Description: Total number of subnets to create
    Type: Number
    Default: 4
  
    
Resources:
# Creates VPC and Internet Gateway and attaches it to VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCidrBlock
      EnableDnsHostnames: True
      EnableDnsSupport: True
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: !Ref projectName
        - Key: stack
          Value: !Ref envName 

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: stack
          Value: dev

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# Creates Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref vpcCidrBlock, !Ref numberOfSubnets, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${projectName}-public-subnet-1"
        - Key: Env
          Value: !Ref envName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!Ref vpcCidrBlock, !Ref numberOfSubnets, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${projectName}-public-subnet-2"
        - Key: Env
          Value: !Ref envName


# Creates Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref vpcCidrBlock, !Ref numberOfSubnets, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${projectName}-private-subnet-1"
        - Key: Env
          Value: !Ref envName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [3, !Cidr [!Ref vpcCidrBlock, !Ref numberOfSubnets, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${projectName}-private-subnet-2"
        - Key: Env
          Value: !Ref envName

# Creates Public Route Table and associates public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${projectName}-PublicRouteTable"
        - Key: Env
          Value: !Ref envName

  PublicSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


# Creates Private Route Table and associates private subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${projectName}-PrivateRouteTable"
        - Key: Env
          Value: !Ref envName

  PrivateSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

# Creates Default Route
  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

# Allocates Elastic IP for NAT Gateway
  NatEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

# NAT Gateway in PublicSubnet1
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatEIP
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${projectName}-NatGateway"
        - Key: Env
          Value: !Ref envName

# Creates Private Route through NAT Gateway
  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${projectName}-VpcId"

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${projectName}-PublicSubnet1"

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${projectName}-PublicSubnet2"

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${projectName}-PrivateSubnet1"

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${projectName}-PrivateSubnet2"