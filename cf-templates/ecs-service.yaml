AWSTemplateFormatVersion: '2010-09-09'
Description: This service deploys in Bridge networking mode on EC2 capacity. Service uses a capacity provider to request EC2 instances to run on. Service runs with networking in private subnets.

Parameters:
  projectName:
    Description: Enter AWS VPC name
    Type: String
    Default: test

  envName:
    Description: Environment tag
    Type: String
    Default: dev

  vpcId:
    Description: VPC ID from vpc template outputs
    Type: AWS::EC2::VPC::Id

  publicSubnetIds:
    Description: List of public subnet IDs
    Type: List<AWS::EC2::Subnet::Id>

  privateSubnetIds:
    Description: List of private subnet IDs
    Type: List<AWS::EC2::Subnet::Id>

  serviceName:
    Description: Name of container
    Type: String
    Default: python

  containerCpu:
    Description: How much CPU to give the container. 1024 is 1 CPU
    Type: Number
    Default: 256

  containerMemory:
    Description: How much memory in megabytes to give the container
    Type: Number
    Default: 512

  containerPort:
    Description: What port does the app run on
    Type: Number
    Default: 8000

  imageUrl:
    Description: The url of a docker image that contains the application process
    Type: String
    Default: 'aashhik/hellopython:v1'

  desiredCount:
    Description: How many copies of the service task to run
    Type: Number
    Default: 2

  clusterName:
    Description: Name of the ECS cluster
    Type: String

  ecsTaskExecutionRole:
    Description: The role used to start up an ECS task
    Type: String
  
  capacityProvider:
    Description: The cluster capacity provider that ECS service should use for scaling
    Type: String

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      Tags: 
        - Key: Name
          Value: !Sub "${projectName}-grouplog"
        - Key: Env
          Value: !Ref envName

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref serviceName
      Cpu: !Ref containerCpu
      Memory: !Ref containerMemory
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !Ref ecsTaskExecutionRole
      ContainerDefinitions:
        - Name: !Sub "${serviceName}-app"
          Cpu: !Ref containerCpu
          Memory: !Ref containerMemory
          Image: !Ref imageUrl
          PortMappings:
            - ContainerPort: !Ref containerPort
              HostPort: !Ref containerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref serviceName
      Tags: 
        - Key: Name
          Value: !Sub "${projectName}-task-definition"
        - Key: Env
          Value: !Ref envName

  Service:
    Type: AWS::ECS::Service
    DependsOn: PublicLoadBalancerListener
    Properties:
      ServiceName: !Ref serviceName
      Cluster: !Ref clusterName
      PlacementStrategies:
        - Field: 'attribute:ecs.availability-zone'
          Type: spread
        - Field: cpu
          Type: binpack
      CapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref capacityProvider
          Weight: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref desiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Sub "${serviceName}-app"
          ContainerPort: !Ref containerPort
          TargetGroupArn: !Ref ServiceTargetGroup
      Tags: 
        - Key: Name
          Value: !Sub "${projectName}-cluster-service"
        - Key: Env
          Value: !Ref envName

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for service
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: !Sub "${projectName}-cluster-service-sg"
        - Key: Env
          Value: !Ref envName

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: !Sub "${projectName}-loadbalancer-sg"
        - Key: Env
          Value: !Ref envName

  ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: instance
      Port: !Ref containerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref vpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 0
      Tags: 
        - Key: Name
          Value: !Sub "${projectName}-target-group"
        - Key: Env
          Value: !Ref envName

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ServiceTargetGroup
                Weight: 100
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${projectName}-lb"
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: !Ref publicSubnetIds
      SecurityGroups:
        - !Ref PublicLoadBalancerSG
      Tags: 
        - Key: Name
          Value: !Sub "${projectName}-lb"
        - Key: Env
          Value: !Ref envName

  ServiceIngressfromLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref ServiceSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSG